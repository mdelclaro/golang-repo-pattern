// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/device/repository.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=./internal/domain/device/repository.go -destination=internal/domain/device/mock/repository.go
//

// Package mock is a generated GoMock package.
package mock

import (
	device "golang-repo-pattern/internal/pkg/entity/device"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockRepository) CreateDevice(deviceData *device.Device) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", deviceData)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockRepositoryMockRecorder) CreateDevice(deviceData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockRepository)(nil).CreateDevice), deviceData)
}

// DeleteDeviceByID mocks base method.
func (m *MockRepository) DeleteDeviceByID(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeviceByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeviceByID indicates an expected call of DeleteDeviceByID.
func (mr *MockRepositoryMockRecorder) DeleteDeviceByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeviceByID", reflect.TypeOf((*MockRepository)(nil).DeleteDeviceByID), id)
}

// GetDeviceByID mocks base method.
func (m *MockRepository) GetDeviceByID(id int32) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByID", id)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByID indicates an expected call of GetDeviceByID.
func (mr *MockRepositoryMockRecorder) GetDeviceByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByID", reflect.TypeOf((*MockRepository)(nil).GetDeviceByID), id)
}

// GetDevices mocks base method.
func (m *MockRepository) GetDevices(brand string, state *device.State) ([]device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", brand, state)
	ret0, _ := ret[0].([]device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockRepositoryMockRecorder) GetDevices(brand, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockRepository)(nil).GetDevices), brand, state)
}

// HandleError mocks base method.
func (m *MockRepository) HandleError(res *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleError", res)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleError indicates an expected call of HandleError.
func (mr *MockRepositoryMockRecorder) HandleError(res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockRepository)(nil).HandleError), res)
}

// UpdateDevice mocks base method.
func (m *MockRepository) UpdateDevice(deviceData *device.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", deviceData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockRepositoryMockRecorder) UpdateDevice(deviceData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockRepository)(nil).UpdateDevice), deviceData)
}
